//ajax popup
//buffer along a line
//change colours of shapes

/* JSLint options  */
/* jslint browser: true, debug: true, plusplus: true */
/* global jQuery:false, Wkt:false, L:false, */

(function ($, L, console, jsts, Wkt) {
    'use strict';

    var map = null,
        featureGroup = null,
        drawnItems = null;

    function initializeMap() {
        //map = L.mapbox.map('map','kennedyneil.g7a9hbh2').setView([51.4438971705205, -0.16874313354492188], 5);

        map = L.map('map').setView([51.4438971705205, -0.16874313354492188], 5);
        //L.tileLayer('http://otile1.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.png', {
        L.tileLayer('http://otile1.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.png', {
            attribution: ''
        }).addTo(map);

        map.on('moveend', function (e) {
            console.log(map.getBounds());
        });

        map.on('click', function (e) {
            console.log("centre: " + e.latlng);
        });

        map.on('popupopen', function (e) {
            if (e.popup.getContent() === '') {
                e.popup.setContent('<span class="glyphicon glyphicon-refresh"></span>');

                window.setTimeout(function () {
                    e.popup.setContent('<strong>This</strong> is a long <br /> and broken string!');
                }, 3000);
            }
        });
    }

    function addDrawControl() {
        // Initialize the FeatureGroup to store editable layers
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        // Initialize the draw control and pass it the FeatureGroup of editable layers
        var drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            }
        });
        map.addControl(drawControl);

        map.on('draw:created', function (e) {
            var type = e.layerType,
                layer = e.layer;

            layer.bindPopup('');

            if (type !== 'marker') {
                layer.setStyle({
                    color: 'orange',
                    fillColor: 'transparent',
                    fillOpacity: '0',
                    className: 'myVectorClass'
                });
            }

            buffer(layer, 0.5).addTo(map);

            drawnItems.addLayer(layer);
        });
    }

    function addPopup() {
        var marker = L.marker([0, 0], {
            clickable: true,
            title: 'Hi'
        });

        marker.addTo(map);
        marker.bindPopup("<h1>Hi I'm a popup</h1><div>And I'm a description</div>");
    }

    function addSomeFeatures() {
        L.circle([52.65973, -7.2551], 5000).addTo(map);

        var line = L.polyline([L.latLng(51.12421, -0.54932), L.latLng(51.20688, 3.47168)], {
            color: 'red'
        }).addTo(map);

        buffer(line, 0.05).addTo(map);
    }

    function redraw(num) {
        // get new number of points, the point layer and the map extent
        // also declare a new array for our new points
        var ext = map.getBounds(),
            index,
            width,
            height,
            randx,
            randy,
            x,
            y;

        if (featureGroup !== null) {
            featureGroup.clearLayers();
            map.removeLayer(featureGroup);
        } else {
            featureGroup = new L.MarkerClusterGroup();
        }

        if (num > 0) {
            width = ext.getWest() - ext.getEast();
            height = ext.getNorth() - ext.getSouth();

            console.log(width, height);
            // generate "random" points within the map's extent
            for (index = 0; index < num; index++) {
                randx = Math.random();
                randy = Math.random();
                x = (randx * width) + ext.getEast();
                y = (randy * height) + ext.getSouth();
                console.log('(' + y + ", " + x + "),");
                featureGroup.addLayer(new L.marker([y, x]).bindPopup('Num: ' + index));
            }

            map.addLayer(featureGroup);
        }
    }

    //using the Wicket library
    function wktTest() {
        // Create a new Wicket instance
        var wkt = new Wkt.Wkt();

        // Read in any kind of WKT string
        wkt.read("POLYGON ((174.63976034132639 -36.725092134174389, 174.63973068868967 -36.726031686547678, 174.63976192462891 -36.726971205586111, 174.63985396642553 -36.727908136157005, 174.640006565971 -36.72883993007482, 174.64021931041748 -36.7297640530326, 174.6404916232774 -36.730677991496734, 174.64082276596838 -36.731579259546081, 174.64121183980006 -36.732465405637029, 174.64165778839813 -36.73333401927588, 174.64215940055792 -36.734182737580426, 174.64271531352139 -36.735009251712825, 174.64332401666769 -36.735811313166067, 174.64398385560824 -36.7365867398872, 174.64469303667474 -36.737333422220068, 174.64544963178832 -36.738049328651734, 174.64625158369688 -36.738732511346669, 174.64693822962064 -36.739282949358156, 174.64768383323155 -36.739858630057164, 174.64846165016709 -36.740406011861673, 174.64927002421686 -36.740923928761106, 174.65010723397242 -36.741411277487053, 174.65097149649546 -36.7418670198673, 174.65186097111749 -36.742290185041163, 174.65277376336428 -36.742679871531308, 174.65370792899552 -36.743035249167633, 174.6546614781515 -36.743355560859094, 174.65563237959805 -36.743640124209705, 174.65661856506034 -36.743888332975004, 174.65761793363652 -36.744099658356312, 174.65862835628141 -36.744273650129472, 174.65964768035067 -36.744409937605987, 174.66067373419622 -36.744508230424422, 174.66170433180193 -36.744568319170263, 174.66187125187963 -36.744571628807165, 174.66281573818767 -36.744734096688411, 174.66448475009389 -36.744916985933195, 174.66485754547634 -36.74494613871429, 174.66512676209925 -36.74501600546219, 174.66661403246027 -36.7453181046272, 174.66812352072611 -36.745537542834583, 174.66964814029453 -36.745673289869337, 174.67118073337613 -36.745724708424085, 174.67271410466847 -36.745691557097267, 174.67424105520786 -36.7455739915289, 174.67575441623845 -36.745372563668319, 174.67724708293827 -36.745088219177482, 174.67851241562641 -36.744776403400209, 174.67885552290068 -36.744768726036895, 174.6807120075168 -36.744622987979767, 174.68254697025824 -36.744353393485923, 174.68434767238256 -36.743961814175933, 174.68610161348477 -36.743450968497513, 174.68677240260482 -36.743212033354112, 174.68691801093379 -36.74331695717693, 174.6876773975446 -36.7438176766247, 174.6927417772518 -36.746982553082262, 174.69402699563727 -36.747734967377077, 174.69537531373234 -36.748412118702916, 174.69796942469247 -36.74960376437469, 174.69946164940217 -36.750236179225631, 174.70038828113593 -36.75055974502574, 174.70046659721746 -36.750729615487735, 174.70094856852722 -36.751623587032519, 174.70148989388272 -36.752495286593721, 174.70526541600904 -36.758135458833877, 174.70576362929938 -36.758846844562122, 174.70630138855441 -36.759539339717328, 174.70687759050102 -36.760211522213595, 174.70749105282871 -36.760862011641969, 174.71244108881214 -36.765827443931258, 174.71312224111244 -36.766483973701561, 174.71384134969011 -36.767113763193656, 174.71853158719085 -36.77099668486089, 174.71858098365129 -36.771063840061338, 174.72125799096767 -36.776782784049146, 174.72185600363852 -36.777945663667396, 174.72554537084471 -36.784408875920114, 174.72594139496974 -36.785072324438744, 174.73286678701081 -36.795995223603391, 174.73470210620374 -36.799211864878735, 174.73519070027291 -36.800021318958741, 174.73572893364764 -36.800810151155126, 174.73600563639158 -36.801171636863849, 174.73357621522811 -36.803800854556563, 174.73292064623706 -36.804556121872885, 174.73231390537538 -36.805337332077343, 174.73175757826371 -36.806142445548154, 174.73125311904005 -36.806969360191026, 174.73080184654989 -36.807815916921982, 174.73040494088858 -36.808679905299606, 174.7300634403035 -36.809559069291872, 174.729778238466 -36.810451113162827, 174.72836071094002 -36.815363771164968, 174.72812960056694 -36.816279680162843, 174.72795784921092 -36.817203989669181, 174.72784592082184 -36.818134214462745, 174.72779411854054 -36.819067853327638, 174.72780304482751 -36.819518430073778, 174.72644484651363 -36.8216691131151, 174.72182282658093 -36.828672747834133, 174.72101224570125 -36.830049780287943, 174.72034920443241 -36.831476918753623, 174.71983844751523 -36.832943968582491, 174.719483632544 -36.834440449434162, 174.71928730360034 -36.835955670103971, 174.71925087282204 -36.837478804873392, 174.7193746100474 -36.838998970839135, 174.71965764061466 -36.840505305668941, 174.72004344335073 -36.842085323348, 174.72050609903863 -36.843629820918053, 174.72113620888879 -36.845135568802448, 174.72192888546235 -36.846590864473221, 174.72287797686863 -36.847984396862259, 174.72397611433814 -36.849305334348436, 174.72521476929785 -36.850543409033868, 174.72658431951072 -36.851688996650864, 174.72807412376949 -36.852733191474854, 174.7282704236745 -36.852857894891152, 174.72887534047564 -36.853513438171547, 174.72973975868561 -36.85432604885446, 174.7306626326791 -36.855096034146683, 174.73164071512386 -36.855820683267517, 174.73267056402494 -36.856497444970877, 174.73277923963511 -36.856559298536872, 174.73329601468478 -36.85772283646309, 174.7335440432829 -36.858169641630241, 174.73357692066966 -36.8587807059509, 174.73371875257308 -36.859947052576672, 174.73395462438523 -36.861103525967827, 174.73428354291005 -36.862245235721105, 174.73470412131275 -36.863367353648876, 174.73560482180727 -36.865496427006178, 174.73612731381627 -36.866617618215763, 174.7367413179204 -36.867708459321292, 174.73744412754394 -36.868764134974313, 174.738232643717 -36.869779984864209, 174.73910338870621 -36.870751524311721, 174.74005252132588 -36.871674464089431, 174.74107585386346 -36.872544729381282, 174.74216887054459 -36.873358477797225, 174.74332674745679 -36.874112116362447, 174.74454437384389 -36.874802317406008, 174.7458163746771 -36.875426033278046, 174.74713713440286 -36.875980509830043, 174.74850082176195 -36.8764632985981, 174.74990141557018 -36.876872267635029, 174.75133273134566 -36.8772056109429, 174.75278844866392 -36.877461856464009, 174.75489177191565 -36.877770958780459, 174.75587835913061 -36.877887606195124, 174.7561736988313 -36.877973089421012, 174.75803752229945 -36.878400235338141, 174.75994030151432 -36.878696512026778, 174.76186782317433 -36.87885970632675, 174.76380568876576 -36.878888599180421, 174.76573942234228 -36.878782974758039, 174.76765457888911 -36.878543622073344, 174.76953685245368 -36.878172329077351, 174.77137218322665 -36.877671869274771, 174.77425872174885 -36.876778923991864, 174.77607882228435 -36.876134982742023, 174.77782074453143 -36.875364041246307, 174.77947079167942 -36.874472162556877, 174.78101599076265 -36.873466360607082, 174.78244419475394 -36.872354544956586, 174.78374417810721 -36.871145458489892, 174.78490572499751 -36.869848608562577, 174.78591970956288 -36.868474192140205, 174.78634366824855 -36.867798718413468, 174.78660719442141 -36.867636154690388, 174.7875023279019 -36.867048928668083, 174.78835861779797 -36.866425434355634, 174.78917379104826 -36.865767327552646, 174.78994568395038 -36.865076355934733, 174.7906722479039 -36.864354354405513, 174.79135155484556 -36.863603240217067, 174.79198180236193 -36.86282500787209, 174.79256131846643 -36.86202172382108, 174.79329068868114 -36.860957066171196, 174.7938342764198 -36.860103458150334, 174.79432058342167 -36.859227824902561, 174.79474823467572 -36.858332645819928, 174.79511602138936 -36.857420455551981, 174.79542290438997 -36.856493836823759, 174.7956680170447 -36.8555554131184, 174.79585066769019 -36.854607841245489, 174.79597034156572 -36.85365380381598, 174.79602670224469 -36.852696001645214, 174.79601959256036 -36.851737146105485, 174.79594903502397 -36.8507799514499, 174.795815231734 -36.849827127129139, 174.79561856377731 -36.848881370123031, 174.79535959012395 -36.847945357308546, 174.79503904601955 -36.847021737885754, 174.79465784087952 -36.846113125883221, 174.79375615525777 -36.844155869352953, 174.79304465891533 -36.842777343561117, 174.79219371477259 -36.841450853608052, 174.79120916365733 -36.8401854934155, 174.79009776137332 -36.838989937386259, 174.78886713226288 -36.837872381004729, 174.78752571685126 -36.836840484727517, 174.78608271393341 -36.835901321546544, 174.78454801750129 -36.835061328581439, 174.78293214894396 -36.834326263030562, 174.78124618498381 -36.833701162780123, 174.77950168184091 -36.8331903119391, 174.77771059614184 -36.832797211533908, 174.77588520311139 -36.832524555561875, 174.77403801260243 -36.832374212565917, 174.77218168353463 -36.832347212855538, 174.77032893732223 -36.832443741460708, 174.76989330777926 -36.832489762282457, 174.77049186558031 -36.831541040880154, 174.771100262444 -36.83048465273972, 174.77162253489152 -36.829398892786891, 174.77205650709149 -36.828288292089404, 174.77240037195497 -36.827157485182148, 174.77265269861644 -36.826011190715128, 174.77281243834057 -36.824854191753658, 174.77287892883075 -36.823691315813114, 174.77285189692307 -36.822527414711793, 174.7728043414856 -36.821784391895477, 174.77718308983248 -36.817042429013192, 174.77802702688163 -36.816053128340009, 174.77909971695749 -36.814712876133569, 174.7799610829378 -36.813530431497547, 174.7807081939192 -36.812298778495354, 174.78133673485573 -36.811025039942095, 174.781843076977 -36.809716581681315, 174.78334395889928 -36.8052835608074, 174.78368319371751 -36.80412101519584, 174.78392593895364 -36.8029429563432, 174.78407113330076 -36.801754556536821, 174.78411814385902 -36.800561033226685, 174.78406676883517 -36.799367626114623, 174.78391723834781 -36.798179574149785, 174.78367021333696 -36.797002092531962, 174.78332678258357 -36.795840349823209, 174.78246782397679 -36.793331935408716, 174.7821798890119 -36.792553274887418, 174.78184862313154 -36.791785840042436, 174.78147470053307 -36.7910311897809, 174.78105888199775 -36.790290856995156, 174.78060201333673 -36.789566345451384, 174.78010502366445 -36.788859126737805, 174.77956892350426 -36.788170637278526, 174.77899480272896 -36.787502275419023, 174.77451972928665 -36.782578015127186, 174.77343051241965 -36.780670730277976, 174.77303080693019 -36.780001621620251, 174.76609932968182 -36.769078154097, 174.76292819937689 -36.763527969652827, 174.7598362752376 -36.756930108140466, 174.75907904062487 -36.755493094067, 174.75817015308817 -36.75411418222275, 174.75576636096989 -36.750848385460053, 174.75506331547541 -36.749946944187442, 174.7542953903224 -36.749080463814366, 174.75346526447359 -36.748251964705624, 174.75257583342889 -36.747464334736733, 174.74677049591651 -36.742660097920293, 174.74376432815154 -36.739645977343393, 174.74211685039626 -36.737186732540145, 174.74086417093307 -36.7336381639866, 174.73994308845778 -36.730275639020306, 174.73944941158885 -36.728771881073861, 174.73879651444361 -36.727307982824072, 174.73798926781922 -36.725894845334913, 174.7370336909419 -36.7245429910907, 174.73593690643824 -36.723262485711906, 174.73470708713074 -36.722062863085895, 174.73335339505724 -36.720953054467209, 174.73188591317222 -36.719941322071989, 174.73031557024061 -36.719035197657782, 174.72865405948241 -36.718241426542669, 174.72691375157464 -36.717565917477053, 174.72510760265362 -36.717013698738313, 174.72324905800033 -36.716588880771944, 174.72135195211939 -36.716294625654967, 174.71943040595019 -36.716133123606511, 174.7174987219673 -36.716105576718711, 174.71643792803982 -36.716158411238581, 174.71598645305551 -36.715876320780879, 174.70613375382695 -36.708521625750464, 174.70527484538485 -36.707907311913438, 174.70437793431449 -36.707329283045169, 174.70344538289382 -36.706789061026356, 174.70247964707849 -36.706288068166067, 174.70148327003935 -36.705827623463414, 174.70045887547207 -36.70540893914098, 174.69940916069683 -36.705033117459216, 174.69833688956604 -36.704701147819911, 174.69712443511216 -36.70435723507309, 174.6959375922716 -36.704047365453711, 174.6947311576703 -36.703791215538217, 174.69350887782355 -36.703589580753047, 174.69227454834964 -36.703443087232372, 174.69107843647794 -36.703364602589481, 174.69052062614114 -36.7030142752825, 174.689589810724 -36.702497670114276, 174.68862779920528 -36.702019561022716, 174.68763704497195 -36.7015811670427, 174.68662007456155 -36.7011836059277, 174.685579481228 -36.70082789130511, 174.68451791833812 -36.7005149300967, 174.68343809261685 -36.700245520210842, 174.68234275725746 -36.700020348512133, 174.68123470491469 -36.699839989073794, 174.68011676059822 -36.69970490171697, 174.67899177448444 -36.699615430840879, 174.67786261466475 -36.699571804546515, 174.67673215984883 -36.699574134056427, 174.67560329204085 -36.699622413431655, 174.67447888920751 -36.699716519586914, 174.67336181795636 -36.699856212603741, 174.67225492624263 -36.700041136340786, 174.67116103612304 -36.700270819340048, 174.67008293657534 -36.70054467602624, 174.6690233764007 -36.70086200819685, 174.66798505722826 -36.701222006798538, 174.66697062663789 -36.701623753985913, 174.66598267142021 -36.702066225457116, 174.66502371098957 -36.702548293060552, 174.66409619096743 -36.703068727665993, 174.66320247695214 -36.703626202292988, 174.66234484849093 -36.704219295488521, 174.66152549326958 -36.704846494945457, 174.66074650153422 -36.705506201352648, 174.66000986075969 -36.706196732466857, 174.65931745057824 -36.706916327396229, 174.65867103798084 -36.70766315108466, 174.65820304380131 -36.708278127851308, 174.65780021101725 -36.708333671688969, 174.65599775431616 -36.708681986843295, 174.65423725215859 -36.709149157447932, 174.65253077040228 -36.709731981894087, 174.65089000541991 -36.710426465894336, 174.64932620405833 -36.711227849804331, 174.64785008664924 -36.712130641182981, 174.64647177359575 -36.713128652369811, 174.64520071603502 -36.714215042824485, 174.64404563105117 -36.715382365940343, 174.64301444188166 -36.716622620014022, 174.64211422352764 -36.717927303023863, 174.64135115414288 -36.719287470844279, 174.64073047253706 -36.720693798499283, 174.64025644208823 -36.722136644037363, 174.63993232131656 -36.723606114591711, 174.63976034132639 -36.725092134174389))");

        wkt.toObject().addTo(map);
    }

    //Use JSTS to create a buffer around a feature (converts to and from GeoJSON to interface with JSTS)
    function buffer(geometry, distance) {
        var reader = new jsts.io.GeoJSONReader(),
            input = reader.read(geometry.toGeoJSON()),
            bufferGeoJSON;

        input = input.geometry.buffer(distance);

        bufferGeoJSON = new jsts.io.GeoJSONWriter().write(input);
        return L.geoJson(bufferGeoJSON);
    }

    $(document).ready(function () {
        initializeMap();

        addDrawControl();

        addPopup();

        addSomeFeatures();

        wktTest();

        $('#plotPoints').on('click', function () {
            redraw($('#numPoints').val());
        });
    });

}(jQuery, L, console, jsts, Wkt));